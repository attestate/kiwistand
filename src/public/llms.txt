# Kiwistand

> Kiwi News is a decentralized news aggregator built on web3 technologies. It allows users to submit, rank, and read news articles, with a focus on community curation and crypto-alignment. The platform integrates with social protocols like Farcaster and Lens.

This project is a Node.js application using Express.js for the backend and server-side rendered views for the frontend. It uses modern JavaScript (ESM) and LMDB for its database.

### Protocol Overview

Kiwi News is built on an open, permissionless, and decentralized peer-to-peer protocol. Key features include:

-   **P2P Content Distribution**: User-generated content is distributed across a P2P network. Nodes use a Merkle Patricia Trie to efficiently synchronize and verify data with each other.
-   **NFT-based Sybil Resistance**: To post or vote, a user's Ethereum address must have minted the "Hyperkiwification" NFT on Optimism. This creates a cost for participation, which helps prevent spam.
-   **Key Delegation**: Users can delegate signing authority from their main wallet (the `from` address that holds the NFT) to a temporary, "hot" key (the `to` address). This allows for a smoother user experience without constant wallet confirmations for every action. The logic for this is handled by the `delegator2` smart contract. For full technical details, see the [`delegator2` repository](https://github.com/attestate/delegator2).

For a deeper dive into the protocol, see the [Protocol Guide](https://github.com/attestate/kiwistand/blob/main/docs/source/protocol-guide.rst).

## IMPORTANT: API Architecture

**The Kiwi News API is split across two different ports with distinct purposes:**

### Port 443 (Standard HTTPS) - Public Read API
- **Base URL**: `https://news.kiwistand.com/api/v1`
- **Purpose**: Public, read-only data access
- **CORS**: Fully enabled (`Access-Control-Allow-Origin: *`)
- **Endpoints**:
  - `GET /feeds/hot` - Trending stories with metadata
  - `GET /feeds/new` - Newest stories
  - `GET /feeds/best` - Top-rated stories
  - `GET /profile/:address` - User profile data (ENS, avatars, social links)
  - `GET /karma/:address` - User karma scores
  - `GET /stories?index=:index` - Single story details

### Port 8443 - Core API (Read/Write)
- **Base URL**: `https://news.kiwistand.com:8443/api/v1`
- **Purpose**: Core API for all read/write operations
- **CORS**: Fully enabled (`Access-Control-Allow-Origin: *`)
- **Endpoints**:
  - `POST /list` - Paginated list of messages
  - `GET /delegations` - Delegation mappings
  - `POST /messages` - Submit new messages (stories, comments, upvotes)

### For Client Developers (Recommended)

If you only want to build a client against the Kiwi News API, use the public instances:

-   **Core API (Read/Write)**: `https://news.kiwistand.com:8443/api/v1`
-   **Public Feeds (Read-only)**: `https://news.kiwistand.com/api/v1`

**Note**: For browser-based applications, you'll need to handle CORS:
- Port 8443 endpoints work directly from browsers
- Port 443 endpoints require a server-side proxy due to lack of CORS headers

### For Node Operators (Advanced)

Running a full Kiwi News node requires syncing with the Ethereum blockchain, which can be resource-intensive. Please see the `readme.md` for details on requirements and the initial sync process.

#### Local Development
1.  Clone the repository.
2.  Install dependencies: `npm install`
3.  Create the environment file: `cp .env-copy .env`
4.  Edit the `.env` file with your RPC node configuration.
5.  Start the development server: `npm run watch`

### Common Commands

-   `npm run watch`: Starts the development server with file watching (most common).
-   `npm run dev`: A similar command to start the server.
-   `npm start`: Starts the production server.
-   `npm test`: Runs the test suite.
-   `npm run lint`: Checks for code formatting issues.

## Core Documentation

-   [CONVENTIONS.md](https://github.com/attestate/kiwistand/blob/main/CONVENTIONS.md): **Crucial Read.** Outlines the coding style, architecture, and conventions. Please adhere to these strictly.
-   [src/web/src/API.mjs](https://github.com/attestate/kiwistand/blob/main/src/web/src/API.mjs): **Crucial Client Reference.** Contains the frontend API logic, including EIP-712 signing details.
-   [src/api.mjs](https://github.com/attestate/kiwistand/blob/main/src/api.mjs): Defines the core Express.js API routes for the backend.
-   [contributing.md](https://github.com/attestate/kiwistand/blob/main/contributing.md): Guidelines on pull requests and the development process.

## Building a Kiwi News Client: A Quick Start Guide

This guide provides everything you need to build a simple client that can read the Kiwi News feed and upvote a story.

### Quick Start: Upvoting a Story

Here is a complete, language-agnostic overview of the process:

1.  **Fetch the Feed**: Send a `POST` request to `https://news.kiwistand.com:8443/api/v1/list` with a JSON body like `{"from": 0, "amount": 10, "type": "amplify"}` to get the first 10 stories.
3.  **Prepare the Message**: Let's say you want to upvote the first story from the feed. You'll create a JSON object with its `title` and `href`.
4.  **Sign the Message**: Using an EIP-712 compliant library, sign the message object with the user's Ethereum private key.
5.  **Submit the Upvote**: Send a `POST` request to `https://news.kiwistand.com:8443/api/v1/messages` with the message object from step 3, plus the `signature` from step 4.

---

## Client API: Step-by-Step Guide

The Kiwi News API is versioned under `/api/v1` and split across two ports as described above.

### Core Concepts

-   **Message**: The fundamental unit of data on Kiwi News (e.g., a story submission, a comment, an upvote).
-   **Message ID (`index`)**: A unique identifier derived from the message's content and timestamp. It's a hex string prefixed with the timestamp, ensuring chronological and content-based uniqueness.
-   **`signer`**: The Ethereum address of the key that signed a message. This could be a user's main wallet or a delegated key.
-   **`identity`**: The Ethereum address that holds the Kiwi Pass NFT. This is the true "author" of a message. If delegation is not used, the `signer` and `identity` will be the same.
-   **Comment href format**: Comments have an `href` field in the format `kiwi:<story_index>` that links them to their parent story.

### Reading from the API

#### Fetching Feeds (`/api/v1/list` on port 8443)

To get a list of stories or comments, send a `POST` request.

-   **Endpoint**: `POST https://news.kiwistand.com:8443/api/v1/list`
-   **Request Body**:
    -   `from` (integer): The starting offset for pagination.
    -   `amount` (integer): The number of items to retrieve (maximum: 500 items per request).
    -   `type` (string, optional): `"amplify"` for stories (default) or `"comment"` for comments.

**Example Request:**
```bash
curl -X POST https://news.kiwistand.com:8443/api/v1/list \
  -H "Content-Type: application/json" \
  -d '{"from": 0, "amount": 10, "type": "amplify"}'
```

**Example Response:**
```json
{
  "status": "success",
  "code": 200,
  "message": "OK",
  "details": "Extracted posts from...",
  "data": [
    {
      "index": "63b0bef1...",
      "href": "https://example.com/story",
      "signature": "0xfbc8c...",
      "timestamp": 1672527601,
      "title": "Example Story Title",
      "type": "amplify",
      "signer": "0x0DF5Ba...",
      "identity": "0x0DF5Ba...",
      "upvotes": 15,
      "upvoters": ["0x0DF5Ba..."],
      "commentCount": 3
    }
  ]
}
```

**Important Notes**:
- The `/list` endpoint returns the data array directly in the `data` field
- Maximum 500 items can be returned per request
- Stories don't include their comments - to get a story with all its comments, use `/api/v1/stories?index=<message_index>`

#### Fetching Named Feeds (port 443)

For curated feeds, use the GET endpoints on port 443:

-   **Endpoints**: 
    - `GET https://news.kiwistand.com/api/v1/feeds/hot`
    - `GET https://news.kiwistand.com/api/v1/feeds/new`
    - `GET https://news.kiwistand.com/api/v1/feeds/best`
-   **Query Parameters**: `?page=0` for pagination
-   **Note**: These endpoints don't support CORS, so browser clients need a proxy

**Response Format for /feeds/* endpoints:**
```json
{
  "status": "success",
  "code": 200,
  "message": "OK",
  "details": "hot feed",
  "data": {
    "stories": [/* array of story objects */]
  }
}
```

**Important Differences from /list**:
- `/feeds/*` endpoints return data in `data.stories` array (nested structure)
- `/list` endpoint returns data directly in `data` array (flat structure)

**Feed Limitations**:
- The `/best` feed frequently returns empty results, especially for shorter time periods. Client applications should implement graceful empty state handling.
- The `/new` feed typically has content available.
- The `/best` feed supports period filtering (`?period=day|week|month|year|all`) - longer periods are more likely to have content.

#### Resolving Author Identity (`signer` vs. `identity`)

When you receive a message, you need to determine the author's identity. Here is the required client-side logic:

1.  **Check the `signer`**: The `signer` field is the address that created the signature.
2.  **Check the `identity`**: The `identity` field is the NFT-holding address.
3.  **If `signer` === `identity`**: The user acted with their main wallet.
4.  **If `signer` !== `identity`**: The user acted with a delegated key. The `identity` field shows you who the true author is. You can verify this delegation is valid by checking the `/api/v1/delegations` endpoint.

#### Fetching a Single Story

-   **Endpoint**: `GET https://news.kiwistand.com/api/v1/stories?index=<message_index>`
-   **Description**: Retrieves the full details for a single story, including all of its comments in the response. Comments are included directly in the story response object, not requiring a separate API call.

### Writing to the API

All write actions require an EIP-712 signature and must be sent to port 8443.

#### The EIP-712 Signature Payload

-   **Domain**:
    ```json
    {
      "name": "kiwinews",
      "version": "1.0.0",
      "salt": "0xfe7a9d68e99b6942bb3a36178b251da8bd061c20ed1e795207ae97183b590e5b"
    }
    ```
-   **Types**:
    ```json
    {
      "Message": [
        { "name": "title", "type": "string" },
        { "name": "href", "type": "string" },
        { "name": "type", "type": "string" },
        { "name": "timestamp", "type": "uint256" }
      ]
    }
    ```

#### Message `type` Field Reference

-   `"amplify"`: Used for both submitting a new story and upvoting an existing one.
-   `"comment"`: Used for posting a comment. The `href` should be `kiwi:<story_index>`.
-   `"reaction"`: Used for emoji reactions on comments. The `href` should be `kiwi:<comment_index>`.

#### Submitting a Message

-   **Endpoint**: `POST https://news.kiwistand.com:8443/api/v1/messages`
-   **Request Body**: A JSON object containing the message data (`title`, `href`, `type`, `timestamp`) plus the `signature`.

**Example Request Body:**
```json
{
  "title": "The Title of the Story Being Upvoted",
  "href": "https://example.com/the-story-url",
  "type": "amplify",
  "timestamp": 1678886400,
  "signature": "0x[... the long EIP-712 signature you generated ...]"
}
```

### Verifying Signatures (Client-Side)

Your client should always verify the signature of messages received from the feed.

**Example using `ethers.js`:**
```javascript
import { verifyTypedData } from "ethers/lib/utils";

// The EIP-712 domain and types (as defined above)
const domain = { /* ... */ };
const types = { /* ... */ };

// A message object from the /api/v1/list response
const messageFromApi = { /* ... */ };

// Separate the signature from the message data
const { signature, signer, ...messageToVerify } = messageFromApi;

// Recover the signer's address
const recoveredAddress = verifyTypedData(domain, types, messageToVerify, signature);

// The recoveredAddress should match the `signer` field
console.log("Is signature valid?", recoveredAddress.toLowerCase() === signer.toLowerCase());
```

### Handling API Errors

-   **Invalid Signature**: The API will return a `400 Bad Request` if the signature does not match the message and signer.
-   **Not on Allowlist**: If the `identity` address does not hold a Kiwi Pass NFT, the API will return a `400 Bad Request` with a detail message like "You must mint the Kiwi NFT...".
-   **Duplicate Message**: If a user tries to upvote the same story twice, the API will return a `400 Bad Request` with a detail message indicating it's a duplicate.

### Other Useful Endpoints (Port 8443)

-   **`GET /delegations`**: Retrieves an object of valid delegations in the form of `to:from`.
-   **`GET /profile/:address`**: Retrieves profile information (ENS, avatar) for an address.
-   **`GET /karma/:address`**: Returns the karma score for an address.

### Other Useful Endpoints (Port 443)

-   **`GET /profile/:address`**: Retrieves profile information (ENS, avatar) for an address.
-   **`GET /karma/:address`**: Returns the karma score for an address.
-   **`GET /feeds/:name`**: Retrieves a specific feed (`hot`, `new`, `best`). Supports `page` for pagination.

## Implementation Notes for Browser Clients

### CORS Handling

Since port 443 endpoints don't support CORS, browser-based clients have two options:

1. **Server-side Proxy**: Create API routes in your framework (Next.js, Express, etc.) to proxy requests
2. **Use Port 8443 Only**: Stick to the core API endpoints which have CORS enabled

### Example Next.js Proxy Route

```javascript
// app/api/proxy/feeds/[name]/route.ts
export async function GET(request, { params }) {
  const { name } = params;
  const url = new URL(request.url);
  const page = url.searchParams.get('page') || '0';
  
  const response = await fetch(
    `https://news.kiwistand.com/api/v1/feeds/${name}?page=${page}`
  );
  
  const data = await response.json();
  return NextResponse.json(data);
}
```

### Response Format

All API responses follow a consistent structure:

**Success Response:**
```json
{
  "status": "success",
  "code": 200,
  "message": "OK",
  "details": "Description of what was returned",
  "data": { /* actual response data */ }
}
```

**Error Response:**
```json
{
  "status": "error",
  "code": 400,
  "message": "Bad Request",
  "details": "Detailed error message",
  "errors": [ /* validation errors if applicable */ ]
}
```

## Testing the API

You can test the API endpoints using curl:

```bash

# Get hot feed (port 443, no CORS)
curl https://news.kiwistand.com/api/v1/feeds/hot

# Get stories list (port 8443)
curl -X POST https://news.kiwistand.com:8443/api/v1/list \
  -H "Content-Type: application/json" \
  -d '{"from": 0, "amount": 20, "type": "amplify"}'

# Get user profile (works on both ports)
curl https://news.kiwistand.com/api/v1/profile/0x0DF5Ba52e8C055950AaAf5fcFE829020e898ee60
```

## Practical Implementation Examples

### Fetching a Story with Comments

Since stories from `/list` or `/feeds/*` don't include comments, you need two API calls:

**Step 1: Get the story from a feed**
```javascript
// Get stories from the hot feed
const feedResponse = await fetch('https://news.kiwistand.com/api/v1/feeds/hot');
const feedData = await feedResponse.json();
const stories = feedData.data.stories;
const firstStory = stories[0];
```

**Step 2: Get the full story with comments**
```javascript
// Use the story's index to fetch it with comments
const storyResponse = await fetch(
  `https://news.kiwistand.com/api/v1/stories?index=${firstStory.index}`
);
const storyData = await storyResponse.json();
// storyData.data now contains the story with all comments included
const storyWithComments = storyData.data;
```

### Fetching Comments for Multiple Stories

If you need comments for multiple stories, batch your requests efficiently:

```javascript
const storiesWithComments = await Promise.all(
  stories.slice(0, 5).map(story => 
    fetch(`https://news.kiwistand.com/api/v1/stories?index=${story.index}`)
      .then(res => res.json())
      .then(data => data.data)
  )
);
```

## Common Pitfalls

1. **Using wrong port**: Remember port 8443 for core API, port 443 for public feeds
2. **CORS issues**: Port 443 endpoints need a proxy for browser access
3. **Missing required fields**: The API validates JSON schemas strictly
4. **Timestamp format**: Use UNIX timestamps in seconds, not milliseconds
5. **Signature format**: Ensure signatures include the "0x" prefix
6. **Case sensitivity**: Ethereum addresses should be compared case-insensitively
7. **Response structure differences**: Remember `/list` returns `data` array directly, while `/feeds/*` returns `data.stories`
8. **Pagination limits**: `/list` endpoint has a maximum of 500 items per request
